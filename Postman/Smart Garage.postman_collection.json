{
	"info": {
		"_postman_id": "e58fc3c0-8594-4f2e-b716-7db605a57959",
		"name": "Smart Garage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46314261",
		"_collection_link": "https://viktoriaspasova.postman.co/workspace/Smart-Garage-~0acc4c03-384f-4207-a636-68fa327d0aae/collection/46314261-e58fc3c0-8594-4f2e-b716-7db605a57959?action=share&source=collection_link&creator=46314261"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "User Search Operations",
					"item": [
						{
							"name": "By Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"let keyword = \"ha\";\r",
											"\r",
											"pm.test(\"All usernames contain the keyword\", function () {\r",
											"    responseData.forEach(user => {\r",
											"        pm.expect(user.username.toLowerCase()).to.include(keyword.toLowerCase());\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users?username=ha&sortDirection=asc&page=0&size=50",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "ha"
										},
										{
											"key": "sortDirection",
											"value": "asc"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"\r",
											"let email = \"abv\";\r",
											"\r",
											"pm.test(\"All emails contain 'abv'\", function () {\r",
											"    responseData.forEach(user => {\r",
											"        pm.expect(user.email.toLowerCase()).to.include(email.toLowerCase());\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users?email=abv&sortDirection=asc&page=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "abv"
										},
										{
											"key": "sortDirection",
											"value": "asc"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"let number = \"06\";\r",
											"\r",
											"pm.test(\"All phone numbers contain '06'\", function () {\r",
											"    responseData.forEach(user => {\r",
											"        pm.expect(user.phoneNumber).to.include(number);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users?phoneNumber=06&sortDirection=asc&page=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "phoneNumber",
											"value": "06"
										},
										{
											"key": "sortDirection",
											"value": "asc"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By Brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users?vehicleBrand=Volkswagen&sortDirection=asc&page=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "vehicleBrand",
											"value": "Volkswagen"
										},
										{
											"key": "sortDirection",
											"value": "asc"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check user's vehicle brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"let expectedBrandName = \"Volkswagen\";\r",
											"\r",
											"pm.test(\"Brand name is correct\", function () {\r",
											"    pm.expect(responseData.brand.name).to.eql(expectedBrandName);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/19",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"19"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User CRUD Operations",
					"item": [
						{
							"name": "Get all Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(responseData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"All fields are not null\", function () {\r",
											"    pm.expect(responseData.id, \"id should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.username, \"username should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.firstName, \"firstName should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.lastName, \"lastName should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.email, \"email should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.phoneNumber, \"phoneNumber should not be null\").to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users?page=0&size=50",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"let expectedId = 24;\r",
											"\r",
											"pm.test(\"User id is incorrect\", function () {\r",
											"    pm.expect(responseData.id).to.eql(expectedId);\r",
											"});\r",
											"\r",
											"pm.test(\"All fields are not null\", function () {\r",
											"    pm.expect(responseData.username, \"username should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.firstName, \"firstName should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.lastName, \"lastName should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.email, \"email should not be null\").to.not.be.null;\r",
											"    pm.expect(responseData.phoneNumber, \"phoneNumber should not be null\").to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/15",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"15"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"let expectedId = 26;\r",
											"\r",
											"pm.test(\"User id is incorrect\", function () {\r",
											"    pm.expect(responseData.id).to.eql(expectedId);\r",
											"});\r",
											"\r",
											"pm.test(\"Fields match the updated values\", function () {\r",
											"    pm.expect(responseData.firstName, \"Incorrect firstName\").to.eql(\"Peter\");\r",
											"    pm.expect(responseData.lastName, \"Incorrect lastName\").to.eql(\"Ivanov\");\r",
											"    pm.expect(responseData.email, \"Incorrect email\").to.eql(\"ivanov@gmail.com\");\r",
											"    pm.expect(responseData.phoneNumber, \"Incorrect phone number\").to.eql(\"0877235001\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"firstName\": \"Peter\",\r\n    \"lastName\": \"Ivanov\",\r\n    \"email\": \"ivanov@gmail.com\",\r\n    \"phoneNumber\": \"0877235001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/26",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"26"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"All fields in response match the expected values\", function () {\r",
											"    const expectedUsername = pm.variables.get(\"randomUserName\");\r",
											"    const expectedEmail = pm.variables.get(\"randomEmail\");\r",
											"    const expectedPhone = pm.variables.get(\"phoneNumber\");\r",
											"\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.username).to.eql(expectedUsername);\r",
											"    pm.expect(response.email).to.eql(expectedEmail);\r",
											"    pm.expect(response.phoneNumber).to.eql(expectedPhone);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"phoneNumber\", Math.floor(1000000000 + Math.random() * 9000000000).toString());\r",
											"\r",
											"pm.variables.set(\"randomUserName\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
											"pm.variables.set(\"randomEmail\", pm.variables.replaceIn(\"{{$randomExampleEmail}}\"));\r",
											"pm.variables.set(\"randomFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
											"pm.variables.set(\"randomLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{randomUserName}}\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"phoneNumber\": \"{{phoneNumber}}\",\r\n  \"firstName\": \"{{randomFirstName}}\",\r\n  \"lastName\": \"{{randomLastName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/customers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 404 for successfull deletion!\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Delete user returns correct message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"User with id 20 not found.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/users/20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"20"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Client Car Services",
			"item": [
				{
					"name": "Search, Filter and Sort",
					"item": [
						{
							"name": "Get Services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-cars/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-cars",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Service History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/1/service-history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"1",
										"service-history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Concrete Car Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Services array is not empty\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.services).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-cars/9/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-cars",
										"9",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter By Owner Acs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-cars/filter-sort?searchTerm=er&sortBy=owner&sortDirection=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-cars",
										"filter-sort"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "er"
										},
										{
											"key": "sortBy",
											"value": "owner"
										},
										{
											"key": "sortDirection",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtered user by keyword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let resposneData = pm.response.json();\r",
											"\r",
											"pm.test(\"User id has the keyword 'er' in the username\", function () {\r",
											"    pm.expect(resposneData.username).to.include('er');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//The Response code in Swagger Docs is 200!!!\r",
											"//Can not make assert with GET request, because there is a defect in the response code!\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-cars/9/services/11",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-cars",
										"9",
										"services",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Added Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-cars/9/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-cars",
										"9",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a New Car",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json();\r",
											"\r",
											"const expectedVin = pm.variables.get(\"randomVin\");\r",
											"const expectedPlate = pm.variables.get(\"randomPlate\");\r",
											"\r",
											"pm.test(\"VIN in response matches the VIN we sent\", function () {\r",
											"    pm.expect(responseData.vin).to.equal(expectedVin);\r",
											"});\r",
											"\r",
											"pm.test(\"License plate in response matches the one we sent\", function () {\r",
											"    pm.expect(responseData.licensePlate).to.equal(expectedPlate);\r",
											"});\r",
											"\r",
											"pm.test(\"Brand, model, year, and engineType match the request\", function () {\r",
											"    pm.expect(responseData.vehicle.brand.name).to.equal(\"Porsche\");\r",
											"    pm.expect(responseData.vehicle.model.name).to.equal(\"Volkswagen\");\r",
											"    pm.expect(responseData.vehicle.year.year).to.equal(2015);\r",
											"    pm.expect(responseData.vehicle.engineType.name).to.equal(\"3.0 V7\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomVin = '';\r",
											"const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
											"for (let i = 0; i < 17; i++) {\r",
											"    randomVin += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"}\r",
											"pm.variables.set(\"randomVin\", randomVin);\r",
											"\r",
											"const prefixes = [\"A\",\"B\",\"CH\",\"Y\",\"TX\",\"H\",\"CC\",\"PP\",\"T\",\"P\",\"BT\",\"EB\",\"CT\",\"X\",\"K\",\"CM\",\"PB\",\"OB\",\"EH\",\"PA\",\"E\",\"KH\",\"PK\",\"CA\",\"C\",\"CB\",\"CO\",\"BP\",\"M\",\"BH\"];\r",
											"const suffixes = \"ABEKMHOPCTYX\";\r",
											"\r",
											"let plate = prefixes[Math.floor(Math.random()*prefixes.length)] +\r",
											"            Math.floor(1000 + Math.random()*9000) +\r",
											"            suffixes[Math.floor(Math.random()*suffixes.length)] +\r",
											"            suffixes[Math.floor(Math.random()*suffixes.length)];\r",
											"\r",
											"pm.variables.set(\"randomPlate\", plate);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vin\": \"{{randomVin}}\",\r\n  \"license_plate\": \"{{randomPlate}}\",\r\n  \"brandName\": \"Porsche\",\r\n  \"modelName\": \"Volkswagen\",\r\n  \"year\": 2015,\r\n  \"engineType\": \"3.0 V7\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/10/client-cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"10",
										"client-cars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Car Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.text(); \r",
											"\r",
											"pm.test(\"Client car successfully updated\", function () {\r",
											"    pm.expect(responseData).to.not.be.null; \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"vin\": \"INHAFDHGU7OM4FID4\",\r\n  \"license_plate\": \"PA5039BO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-cars/5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-cars",
										"5"
									]
								}
							},
							"response": []
						}
					],
					"description": "There is no DELETE Request Option in Swagger Documentation."
				}
			]
		},
		{
			"name": "Vehicles",
			"item": [
				{
					"name": "CRUD Operations",
					"item": [
						{
							"name": "GET All Vehicles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"const vehicle = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Vehicle has required fields (not null)\", function () {\r",
											"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType, \"Vehicle engineType is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Brand has id and name\", function () {\r",
											"    pm.expect(vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Model has id and name\", function () {\r",
											"    pm.expect(vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Year has id and year\", function () {\r",
											"    pm.expect(vehicle.year.id, \"Year id is missing ot null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"EngineType has id and name\", function () {\r",
											"    pm.expect(vehicle.engineType.id, \"EngineType id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType.name, \"EngineType name is missing or null\").to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/vehicles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const vehicle = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Vehicle has required fields\", function () {\r",
											"    pm.expect(vehicle).to.have.property(\"id\");\r",
											"    pm.expect(vehicle).to.have.property(\"brand\");\r",
											"    pm.expect(vehicle).to.have.property(\"model\");\r",
											"    pm.expect(vehicle).to.have.property(\"year\");\r",
											"    pm.expect(vehicle).to.have.property(\"engineType\");\r",
											"    pm.expect(vehicle).to.have.property(\"deleted\");\r",
											"});\r",
											"\r",
											"pm.test(\"Brand has id and name\", function () {\r",
											"    pm.expect(vehicle.brand).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.brand).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Model has id and name\", function () {\r",
											"    pm.expect(vehicle.model).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.model).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Year has id and year\", function () {\r",
											"    pm.expect(vehicle.year).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.year).to.have.property(\"year\");\r",
											"});\r",
											"\r",
											"pm.test(\"EngineType has id and name\", function () {\r",
											"    pm.expect(vehicle.engineType).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.engineType).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/34",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"34"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const vehicle = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Vehicle has required fields (not null)\", function () {\r",
											"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType, \"Vehicle engineType is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomName = '';\r",
											"const chars = 'abcdefghijklmnopqrstuvwxyz'; \r",
											"\r",
											"for (let i = 0; i < 6; i++) {  \r",
											"    randomName += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"}\r",
											"pm.variables.set(\"modelName\", randomName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"brandName\": \"Volkswagen\",\r\n  \"modelName\": \"{{modelName}}\",\r\n  \"year\": 2008,\r\n  \"engineType\": \"1.4 TSI\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Created Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const vehicle = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Vehicle id matches created vehicle id\", function () {\r",
											"    pm.expect(vehicle.id).to.eql(67);\r",
											"});\r",
											"\r",
											"pm.test(\"Vehicle has required fields (not null)\", function () {\r",
											"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType, \"Vehicle engineType is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Brand has id and name\", function () {\r",
											"    pm.expect(vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Model has id and name\", function () {\r",
											"    pm.expect(vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Year has id and year\", function () {\r",
											"    pm.expect(vehicle.year.id, \"Year id is missing ot null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"EngineType has id and name\", function () {\r",
											"    pm.expect(vehicle.engineType.id, \"EngineType id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType.name, \"EngineType name is missing or null\").to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/67",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"67"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body indicates success\", function () {\r",
											"  pm.expect(pm.response.text().trim()).to.be.oneOf([\"1\",\"\"]); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"brandName\": \"Audi\",\r\n  \"modelName\": \"A6\",\r\n  \"year\": 2009,\r\n  \"engineType\": \"2.0 TDI\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/67",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"67"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE returns 200/204\", function () {\r",
											"    pm.expect([200, 204]).to.include(pm.response.code);\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE success indicator\", function () {\r",
											"    const txt = pm.response.text();\r",
											"    pm.expect(txt === \"\" || txt === \"1\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Body is empty or '1'\", function () {\r",
											"    pm.expect(pm.response.text().trim()).to.be.oneOf([\"\", \"1\"]);\r",
											"});\r",
											"\r",
											"console.log(\"Deleted vehicle with ID:\", pm.environment.get(\"vehicleId\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/67",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"67"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Repair Service",
			"item": [
				{
					"name": "CRUD Operations",
					"item": [
						{
							"name": "CREATE Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect((pm.response.headers.get(\"Content-Type\") || \"\").toLowerCase()).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"const json = pm.response.json();\r",
											"\r",
											"pm.test(\"RepairService fields exist\", function () {\r",
											"  pm.expect(json).to.be.an(\"object\");\r",
											"  pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");\r",
											"  pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");\r",
											"  pm.expect(json).to.have.property(\"price\").that.is.a(\"number\");\r",
											"  pm.expect(json).to.have.property(\"deleted\").that.is.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"baseService null or object\", function () {\r",
											"  if (json.baseService === null) {\r",
											"    pm.expect(json.baseService).to.equal(null);\r",
											"  } else {\r",
											"    pm.expect(json.baseService).to.be.an(\"object\");\r",
											"    pm.expect(json.baseService).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(json.baseService).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(json.baseService).to.have.property(\"services\").that.is.an(\"array\");\r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomName = '';\r",
											"const chars = 'abcdefghijklmnopqrstuvwxyz'; \r",
											"\r",
											"for (let i = 0; i < 15; i++) {  \r",
											"    randomName += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"}\r",
											"pm.variables.set(\"name\", randomName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"price\": 150\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomName = '';\r",
											"const chars = 'abcdefghijklmnopqrstuvwxyz'; \r",
											"\r",
											"for (let i = 0; i < 6; i++) {  \r",
											"    randomName += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"}\r",
											"pm.variables.set(\"name\", randomName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"price\": 180\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services/34",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services",
										"34"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services/34",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services",
										"34"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Services filter/sort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let json = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(json).to.be.an(\"array\");\r",
											"    pm.expect(json.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"const service = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Service has required fields (not null)\", function () {\r",
											"    pm.expect(service.id, \"Order id is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.vehicle, \"Vehicle is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.status, \"Order status is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services/filter-sort?name=Advanced&price=180&sortBy=name&sortDirection=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services",
										"filter-sort"
									],
									"query": [
										{
											"key": "name",
											"value": "Advanced"
										},
										{
											"key": "price",
											"value": "180"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "sortDirection",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "GET All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"const order = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Order has required fields (not null)\", function () {\r",
									"    pm.expect(order.id, \"Order id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.status, \"Order status is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"ClientCar has required fields\", function () {\r",
									"    pm.expect(order.clientCar.id, \"Client car id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vin, \"Client car vin is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.licensePlate, \"Client car license plate is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle, \"Client car vhicle is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Vehicle has required fields\", function () {\r",
									"    const vehicle = order.clientCar.vehicle;\r",
									"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.engineType, \"Vehicle engine type is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Brand has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Model has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Year has id and year\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.year.id, \"Year id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"EngineType has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.engineType.id, \"Engine type id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.engineType.name, \"Engine type name is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const order = pm.response.json();\r",
									"\r",
									"pm.test(\"Order id matches 1\", function () {\r",
									"  pm.expect(order.id).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Order has required fields (not null)\", function () {\r",
									"    pm.expect(order.id, \"Order id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.status, \"Order status is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"ClientCar has required fields\", function () {\r",
									"    pm.expect(order.clientCar.id, \"Client car id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vin, \"Client car vin is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.licensePlate, \"Client car license plate is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle, \"Client car vhicle is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Vehicle has required fields\", function () {\r",
									"    const vehicle = order.clientCar.vehicle;\r",
									"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.engineType, \"Vehicle engine type is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Brand has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Model has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Year has id and year\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.year.id, \"Year id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"EngineType has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.engineType.id, \"Engine type id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.engineType.name, \"Engine type name is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE Order status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body indicates success\", function () {\r",
									"  pm.expect(pm.response.text().trim()).to.be.oneOf([\"1\",\"\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/status?newStatus=READY_FOR_PICKUP",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"status"
							],
							"query": [
								{
									"key": "newStatus",
									"value": "READY_FOR_PICKUP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Order total-price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const total = pm.response.json();\r",
									"\r",
									"pm.test(\"Currency is EUR or BGN\", function () {\r",
									"  const q = pm.request.url.query.toObject();\r",
									"  pm.expect([\"EUR\",\"BGN\"]).to.include((q.currency || \"BGN\").toUpperCase());\r",
									"});\r",
									"\r",
									"pm.test(\"Total price is a number\", function () {\r",
									"  pm.expect(total).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Total price is not null\", function () {\r",
									"  pm.expect(total,\"Total is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/total-price?currency={{currency}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"total-price"
							],
							"query": [
								{
									"key": "currency",
									"value": "{{currency}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Order  download-pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// currency in query must be EUR or BGN\r",
									"pm.test(\"Currency is EUR or BGN\", function () {\r",
									"  const q = pm.request.url.query.toObject();\r",
									"  pm.expect([\"EUR\",\"BGN\"]).to.include((q.currency || \"BGN\").toUpperCase());\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/pdf\", function () {\r",
									"  const ct = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"  pm.expect(ct.toLowerCase()).to.include(\"application/pdf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Disposition has a PDF filename\", function () {\r",
									"  const cd = pm.response.headers.get(\"Content-Disposition\");\r",
									"  if (cd) {\r",
									"    pm.expect(cd.toLowerCase()).to.match(/attachment/);\r",
									"    pm.expect(cd).to.match(/\\.pdf/i);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/download-pdf?currency={{currency}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"download-pdf"
							],
							"query": [
								{
									"key": "currency",
									"value": "{{currency}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"const order = pm.response.json()[0];\r",
									"\r",
									"// Order\r",
									"pm.test(\"Order has required fields (not null)\", function () {\r",
									"    pm.expect(order.id, \"Order id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.status, \"Order status is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									"// check nested clientCar\r",
									"pm.test(\"ClientCar has required fields\", function () {\r",
									"    pm.expect(order.clientCar.id, \"Client car id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vin, \"Client car vin is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.licensePlate, \"Client car license plate is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle, \"Client car vhicle is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check vehicle\r",
									"pm.test(\"Vehicle has required fields\", function () {\r",
									"    const vehicle = order.clientCar.vehicle;\r",
									"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.engineType, \"Vehicle engine type is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check brand/model/year/engineType nested\r",
									"pm.test(\"Brand has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Model has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Year has id and year\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.year.id, \"Year id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"EngineType has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.engineType.id, \"Engine type id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.engineType.name, \"Engine type name is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "Qwertyuiop1!",
				"type": "string"
			},
			{
				"key": "username",
				"value": "user",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}