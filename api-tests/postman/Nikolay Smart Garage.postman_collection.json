{
	"info": {
		"_postman_id": "8f20647b-5d42-43e6-9768-de4f509a545d",
		"name": "Smart Garage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46314261",
		"_collection_link": "https://viktoriaspasova.postman.co/workspace/Smart-Garage-~0acc4c03-384f-4207-a636-68fa327d0aae/collection/46314261-8f20647b-5d42-43e6-9768-de4f509a545d?action=share&source=collection_link&creator=46314261"
	},
	"item": [
		{
			"name": "Vehicles",
			"item": [
				{
					"name": "CRUD Operations",
					"item": [
						{
							"name": "GET All Vehicles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// check first object structure\r",
											"const vehicle = pm.response.json()[0];\r",
											"\r",
											"// Vehicle\r",
											"pm.test(\"Vehicle has required fields (not null)\", function () {\r",
											"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType, \"Vehicle engineType is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check brand\r",
											"pm.test(\"Brand has id and name\", function () {\r",
											"    pm.expect(vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check model\r",
											"pm.test(\"Model has id and name\", function () {\r",
											"    pm.expect(vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check year\r",
											"pm.test(\"Year has id and year\", function () {\r",
											"    pm.expect(vehicle.year.id, \"Year id is missing ot null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check engineType\r",
											"pm.test(\"EngineType has id and name\", function () {\r",
											"    pm.expect(vehicle.engineType.id, \"EngineType id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType.name, \"EngineType name is missing or null\").to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/vehicles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const vehicle = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Vehicle has required fields\", function () {\r",
											"    pm.expect(vehicle).to.have.property(\"id\");\r",
											"    pm.expect(vehicle).to.have.property(\"brand\");\r",
											"    pm.expect(vehicle).to.have.property(\"model\");\r",
											"    pm.expect(vehicle).to.have.property(\"year\");\r",
											"    pm.expect(vehicle).to.have.property(\"engineType\");\r",
											"    pm.expect(vehicle).to.have.property(\"deleted\");\r",
											"});\r",
											"\r",
											"// check brand\r",
											"pm.test(\"Brand has id and name\", function () {\r",
											"    pm.expect(vehicle.brand).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.brand).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"// check model\r",
											"pm.test(\"Model has id and name\", function () {\r",
											"    pm.expect(vehicle.model).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.model).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"// check year\r",
											"pm.test(\"Year has id and year\", function () {\r",
											"    pm.expect(vehicle.year).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.year).to.have.property(\"year\");\r",
											"});\r",
											"\r",
											"// check engineType\r",
											"pm.test(\"EngineType has id and name\", function () {\r",
											"    pm.expect(vehicle.engineType).to.have.property(\"id\");\r",
											"    pm.expect(vehicle.engineType).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/34",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"34"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const vehicle = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Vehicle has required fields (not null)\", function () {\r",
											"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType, \"Vehicle engineType is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"vehicleId\", String(vehicle.id));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"brandName\": \"Volkswagen\",\r\n  \"modelName\": \"Golf\",\r\n  \"year\": 2008,\r\n  \"engineType\": \"1.4 TSI\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Created Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const vehicle = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// assert actual values\r",
											"pm.test(\"Vehicle id matches saved environment variable vehicleId\", function () {\r",
											"    pm.expect(vehicle.id).to.eql(Number(pm.environment.get(\"vehicleId\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Vehicle has required fields (not null)\", function () {\r",
											"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType, \"Vehicle engineType is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check brand\r",
											"pm.test(\"Brand has id and name\", function () {\r",
											"    pm.expect(vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check model\r",
											"pm.test(\"Model has id and name\", function () {\r",
											"    pm.expect(vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check year\r",
											"pm.test(\"Year has id and year\", function () {\r",
											"    pm.expect(vehicle.year.id, \"Year id is missing ot null\").to.not.be.null;\r",
											"    pm.expect(vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
											"});\r",
											"\r",
											"// check engineType\r",
											"pm.test(\"EngineType has id and name\", function () {\r",
											"    pm.expect(vehicle.engineType.id, \"EngineType id is missing or null\").to.not.be.null;\r",
											"    pm.expect(vehicle.engineType.name, \"EngineType name is missing or null\").to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/{{vehicleId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"{{vehicleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body indicates success\", function () {\r",
											"  pm.expect(pm.response.text().trim()).to.be.oneOf([\"1\",\"\"]); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"brandName\": \"Audi\",\r\n  \"modelName\": \"A6\",\r\n  \"year\": 2009,\r\n  \"engineType\": \"2.0 TDI\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/{{vehicleId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"{{vehicleId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status is 200 or 204\r",
											"pm.test(\"DELETE returns 200/204\", function () {\r",
											"    pm.expect([200, 204]).to.include(pm.response.code);\r",
											"});\r",
											"\r",
											"// Body is either empty or \"1\"\r",
											"pm.test(\"DELETE success indicator\", function () {\r",
											"    const txt = pm.response.text();   // empty string if 204/empty body\r",
											"    pm.expect(txt === \"\" || txt === \"1\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Body is empty or '1'\", function () {\r",
											"    pm.expect(pm.response.text().trim()).to.be.oneOf([\"\", \"1\"]);\r",
											"});\r",
											"\r",
											"console.log(\"Deleted vehicle with ID:\", pm.environment.get(\"vehicleId\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/vehicles/{{vehicleId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"vehicles",
										"{{vehicleId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Repair Service",
			"item": [
				{
					"name": "CRUD Operations",
					"item": [
						{
							"name": "CREATE Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect((pm.response.headers.get(\"Content-Type\") || \"\").toLowerCase()).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"const json = pm.response.json();\r",
											"// Basic shape\r",
											"pm.test(\"RepairService fields exist\", function () {\r",
											"  pm.expect(json).to.be.an(\"object\");\r",
											"  pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");\r",
											"  pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");\r",
											"  pm.expect(json).to.have.property(\"price\").that.is.a(\"number\");\r",
											"  pm.expect(json).to.have.property(\"deleted\").that.is.a(\"boolean\");\r",
											"});\r",
											"\r",
											"// baseService is nullable OR object\r",
											"pm.test(\"baseService nullable or object\", function () {\r",
											"  if (json.baseService === null) {\r",
											"    pm.expect(json.baseService).to.equal(null);\r",
											"  } else {\r",
											"    pm.expect(json.baseService).to.be.an(\"object\");\r",
											"    pm.expect(json.baseService).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(json.baseService).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(json.baseService).to.have.property(\"services\").that.is.an(\"array\");\r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"OBD-II Engine Diagnostics\",\r\n  \"price\": 150\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Wheel Alignment\", // Wheel Alignment\r\n  \"price\": 180\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services/34",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services",
										"34"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services/34",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services",
										"34"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Services filter/sort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse JSON (array expected)\r",
											"let json = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(json).to.be.an(\"array\");\r",
											"    pm.expect(json.length).to.be.greaterThan(0); // not empty\r",
											"});\r",
											"\r",
											"// // Check the first element\r",
											"// let item = json[0];\r",
											"const service = pm.response.json()[0];\r",
											"\r",
											"// Service\r",
											"pm.test(\"Service has required fields (not null)\", function () {\r",
											"    pm.expect(service.id, \"Order id is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.vehicle, \"Vehicle is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.status, \"Order status is missing or null\").to.not.be.null;\r",
											"    pm.expect(service.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
											"    \r",
											"});\r",
											"\r",
											"// pm.test(\"RepairService object has required fields\", function () {\r",
											"//     pm.expect(item).to.have.property(\"id\");\r",
											"//     pm.expect(item).to.have.property(\"name\");\r",
											"//     pm.expect(item).to.have.property(\"price\");\r",
											"//     pm.expect(item).to.have.property(\"baseService\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"RepairService field types are correct\", function () {\r",
											"//     pm.expect(item.id).to.be.a(\"number\");\r",
											"//     pm.expect(item.name).to.be.a(\"string\");\r",
											"//     pm.expect(item.price).to.be.a(\"number\");\r",
											"// });\r",
											"\r",
											"// // Check baseService object\r",
											"// pm.test(\"baseService has required fields\", function () {\r",
											"//     pm.expect(item.baseService).to.be.an(\"object\");\r",
											"//     pm.expect(item.baseService).to.have.property(\"id\");\r",
											"//     pm.expect(item.baseService).to.have.property(\"name\");\r",
											"//     pm.expect(item.baseService).to.have.property(\"services\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"baseService field types are correct\", function () {\r",
											"//     pm.expect(item.baseService.id).to.be.a(\"number\");\r",
											"//     pm.expect(item.baseService.name).to.be.a(\"string\");\r",
											"//     pm.expect(item.baseService.services).to.be.an(\"array\");\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/services/filter-sort?name=Wheel Alignment&price=180&sortBy=name&sortDirection=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"services",
										"filter-sort"
									],
									"query": [
										{
											"key": "name",
											"value": "Wheel Alignment"
										},
										{
											"key": "price",
											"value": "180"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "sortDirection",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "GET All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// check first object structure\r",
									"const order = pm.response.json()[0];\r",
									"pm.environment.set(\"orderId\", String(order.id));\r",
									"\r",
									"// Order\r",
									"pm.test(\"Order has required fields (not null)\", function () {\r",
									"    pm.expect(order.id, \"Order id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.status, \"Order status is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									"// check nested clientCar\r",
									"pm.test(\"ClientCar has required fields\", function () {\r",
									"    pm.expect(order.clientCar.id, \"Client car id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vin, \"Client car vin is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.licensePlate, \"Client car license plate is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle, \"Client car vhicle is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check vehicle\r",
									"pm.test(\"Vehicle has required fields\", function () {\r",
									"    const vehicle = order.clientCar.vehicle;\r",
									"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.engineType, \"Vehicle engine type is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check brand/model/year/engineType nested\r",
									"pm.test(\"Brand has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Model has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Year has id and year\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.year.id, \"Year id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"EngineType has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.engineType.id, \"Engine type id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.engineType.name, \"Engine type name is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const order = pm.response.json();\r",
									"\r",
									"pm.test(\"Order id matches saved environment variable orderId\", function () {\r",
									"  pm.expect(order.id).to.eql(Number(pm.environment.get(\"orderId\")));\r",
									"});\r",
									"\r",
									"// ---- top-level\r",
									"// Order\r",
									"pm.test(\"Order has required fields (not null)\", function () {\r",
									"    pm.expect(order.id, \"Order id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.status, \"Order status is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									"// check nested clientCar\r",
									"pm.test(\"ClientCar has required fields\", function () {\r",
									"    pm.expect(order.clientCar.id, \"Client car id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vin, \"Client car vin is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.licensePlate, \"Client car license plate is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle, \"Client car vhicle is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check vehicle\r",
									"pm.test(\"Vehicle has required fields\", function () {\r",
									"    const vehicle = order.clientCar.vehicle;\r",
									"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.engineType, \"Vehicle engine type is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check brand/model/year/engineType nested\r",
									"pm.test(\"Brand has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Model has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Year has id and year\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.year.id, \"Year id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"EngineType has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.engineType.id, \"Engine type id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.engineType.name, \"Engine type name is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE Order status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body indicates success\", function () {\r",
									"  pm.expect(pm.response.text().trim()).to.be.oneOf([\"1\",\"\"]); // or .to.be.oneOf([\"1\",\"\"])\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}/status?newStatus=READY_FOR_PICKUP",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}",
								"status"
							],
							"query": [
								{
									"key": "newStatus",
									"value": "READY_FOR_PICKUP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Order total-price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const total = pm.response.json();\r",
									"\r",
									"// currency in query must be EUR or BGN\r",
									"pm.test(\"Currency is EUR or BGN\", function () {\r",
									"  const q = pm.request.url.query.toObject();\r",
									"  pm.expect([\"EUR\",\"BGN\"]).to.include((q.currency || \"BGN\").toUpperCase());\r",
									"});\r",
									"\r",
									"pm.test(\"Total price is a number\", function () {\r",
									"  pm.expect(total).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Total price is not null\", function () {\r",
									"  pm.expect(total,\"Total is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}/total-price?currency={{currency}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}",
								"total-price"
							],
							"query": [
								{
									"key": "currency",
									"value": "{{currency}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Order  download-pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// currency in query must be EUR or BGN\r",
									"pm.test(\"Currency is EUR or BGN\", function () {\r",
									"  const q = pm.request.url.query.toObject();\r",
									"  pm.expect([\"EUR\",\"BGN\"]).to.include((q.currency || \"BGN\").toUpperCase());\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/pdf\", function () {\r",
									"  const ct = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"  pm.expect(ct.toLowerCase()).to.include(\"application/pdf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Disposition has a PDF filename\", function () {\r",
									"  const cd = pm.response.headers.get(\"Content-Disposition\");\r",
									"  if (cd) {\r",
									"    pm.expect(cd.toLowerCase()).to.match(/attachment/);\r",
									"    pm.expect(cd).to.match(/\\.pdf/i);\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}/download-pdf?currency={{currency}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}",
								"download-pdf"
							],
							"query": [
								{
									"key": "currency",
									"value": "{{currency}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"const order = pm.response.json()[0];\r",
									"\r",
									"// Order\r",
									"pm.test(\"Order has required fields (not null)\", function () {\r",
									"    pm.expect(order.id, \"Order id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar, \"Order clientCar is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.status, \"Order status is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.orderDate, \"Order date is missing or null\").to.not.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									"// check nested clientCar\r",
									"pm.test(\"ClientCar has required fields\", function () {\r",
									"    pm.expect(order.clientCar.id, \"Client car id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vin, \"Client car vin is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.licensePlate, \"Client car license plate is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle, \"Client car vhicle is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check vehicle\r",
									"pm.test(\"Vehicle has required fields\", function () {\r",
									"    const vehicle = order.clientCar.vehicle;\r",
									"    pm.expect(vehicle.id, \"Vehicle id is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.brand, \"Vehicle brand is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.model, \"Vehicle model is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.year, \"Vehicle year is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.engineType, \"Vehicle engine type is missing or null\").to.not.be.null;\r",
									"    pm.expect(vehicle.deleted, \"Vehicle deleted flag is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"// check brand/model/year/engineType nested\r",
									"pm.test(\"Brand has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.brand.id, \"Brand id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.brand.name, \"Brand name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Model has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.model.id, \"Model id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.model.name, \"Model name is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Year has id and year\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.year.id, \"Year id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.year.year, \"Year year is missing or null\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"EngineType has id and name\", function () {\r",
									"    pm.expect(order.clientCar.vehicle.engineType.id, \"Engine type id is missing or null\").to.not.be.null;\r",
									"    pm.expect(order.clientCar.vehicle.engineType.name, \"Engine type name is missing or null\").to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "Qwertyuiop1!",
				"type": "string"
			},
			{
				"key": "username",
				"value": "user",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}